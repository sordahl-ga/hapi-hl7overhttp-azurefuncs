<?xml version = "1.0" ?>

#set($HASH = '#')

<xsd:schema
  xmlns="urn:hl7-org:v2xml"
  targetNamespace="urn:hl7-org:v2xml"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.w3.org/2001/XMLSchema xsd.xsd">

<!-- 
*********************************************************
Generated by HAPI v${hapiVersion}
http://hl7api.sourceforge.net/
*********************************************************
-->
	
	#foreach($runtimeProfile in $runtimeProfiles) 
		#set($staticDef = $runtimeProfile.message)
		#set($structId = $staticDef.msgStructID)
		
		<xsd:element name="${structId}" type="${structId}.CONTENT"/>
		
		#foreach($nextEntry in $triggerMappings.entrySet())
			#if($nextEntry.value == ${structId})
				<xsd:element name="$nextEntry.key" type="${structId}.CONTENT"/>
			#end
		#end
		
	#end

	#foreach($runtimeProfile in $runtimeProfiles) 
		#set($staticDef = $runtimeProfile.message)
		#set($structId = $staticDef.msgStructID)
		
		<!-- Begin: $structId -->
		#genStructure($staticDef, $structId, true)
		
	#end
  
</xsd:schema>

#macro( genStructure $segmentContainerRef $curGroupName $rootStructure)
  #if (!${rootStructure})
    <xsd:element name="${curGroupName}" type="${curGroupName}.CONTENT"/>
  #end
  <xsd:complexType name="${curGroupName}.CONTENT">
    <xsd:sequence>
      #foreach($nextStructure in $segmentContainerRef.childrenAsList) 
      	#if($nextStructure.class.simpleName == "Seg")
      		#if(${nextStructure.max} > 0) #set($max = ${nextStructure.max}) #else #set($max = "unbounded") #end 
      		<xsd:element ref="$esc.xml(${nextStructure.name})" minOccurs="${nextStructure.min}" maxOccurs="${max}" />
      	#elseif ($nextStructure.class.simpleName == "SegGroup")
      		##set ($nextStructure = $nextStructure.childrenAsList.get(0))
				#set ($nextName = ${structId} + "." + ${nextStructure.name})
				<xsd:element ref="$esc.xml($nextName)" minOccurs="${nextStructure.min}" maxOccurs="${max}" />
      	#end
      #end
    </xsd:sequence>
  </xsd:complexType>

   #foreach($nextStructure in $segmentContainerRef.childrenAsList) 
   	#if($nextStructure.class.simpleName == "Seg")
			#if ($segmentDefs.add(${nextStructure.name}))
   			<xsd:element name="${nextStructure.name}" type="${nextStructure.name}.CONTENT"/>
   			<xsd:complexType name="${nextStructure.name}.CONTENT">
   				<xsd:sequence>
   					#foreach($nextField in $nextStructure.fieldsAsList)
   						<xsd:element ref="$esc.xml(${nextStructure.name}).$foreach.count" minOccurs="0" maxOccurs="1" />
   					#end
   					<xsd:any processContents="lax" namespace="${HASH}${HASH}other" minOccurs="0"/>
   				</xsd:sequence>
            </xsd:complexType>
				#foreach($nextField in $nextStructure.fieldsAsList)
					#set ($nextFieldName = ${nextStructure.name} + "." + $foreach.count)
            	<xsd:element name="$nextFieldName" type="${nextFieldName}.CONTENT" />
            	<xsd:attributeGroup name="${nextFieldName}.ATTRIBUTES">
            		<xsd:attribute name="Item" type="xsd:string" fixed=""/>
            		<xsd:attribute name="Type" type="xsd:string" fixed=""/>
            		<xsd:attribute name="Table" type="xsd:string" fixed=""/>
            		<xsd:attribute name="LongName" type="xsd:string" fixed="$esc.xml(${nextField.name})"/>
            	</xsd:attributeGroup>					
            	<xsd:complexType name="${nextFieldName}.CONTENT">
						#if (${nextField.childrenAsList.empty})
               		<xsd:simpleContent>
               			<xsd:extension base="${nextField.datatype}">
               				<xsd:attributeGroup ref="${nextFieldName}.ATTRIBUTES"/>
               			</xsd:extension>
               		</xsd:simpleContent>
						#else
               		<xsd:complexContent>
               			<xsd:extension base="${nextField.datatype}">
               				<xsd:attributeGroup ref="${nextFieldName}.ATTRIBUTES"/>
               			</xsd:extension>
               		</xsd:complexContent>
						#end
               </xsd:complexType>
					#addField(${nextField}, ${nextFieldName}, $false)
				#end
			#end
		#elseif ($nextStructure.class.simpleName == "SegGroup")
     		##set ($nextStructure = $nextStructure.childrenAsList.get(0))
			#set ($nextName = ${structId} + "." + ${nextStructure.name})
			#genStructure($nextStructure, $nextName, false)
   	#end
   #end

#end

#macro(addField $field $fieldName $isSub)
	#if ($fieldDefs.add(${field.datatype}))
		#if(${field.childrenAsList.empty})
			<xsd:simpleType name="${field.datatype}">
				<xsd:restriction base="xsd:string"/>
			</xsd:simpleType>
		#else
			#if ($compositeFieldDefs.add(${field.datatype}))
			#end
         <xsd:complexType name="${field.datatype}">
         	<xsd:sequence>
					#set ($nextDatatype = ${field.datatype})
					#foreach ($nextComponent in ${field.childrenAsList})
						#set ($nextComponentName = $nextDatatype + "." + $foreach.count)
						<xsd:element ref="$esc.xml($nextComponentName)" minOccurs="0" maxOccurs="1"/>
					#end
         	</xsd:sequence>
         </xsd:complexType>			
		#end
		
		#if(${field.childrenAsList.empty})
		#else
			#set ($nextDatatype = ${field.datatype})
			#foreach ($nextComponent in ${field.childrenAsList})
				#set ($nextComponentName = $nextDatatype + "." + $foreach.count)
					<xsd:attributeGroup name="${nextComponentName}.ATTRIBUTES">
						<xsd:attribute name="Type" type="xsd:string" fixed=""/>
						<xsd:attribute name="Table" type="xsd:string" fixed=""/>
						<xsd:attribute name="LongName" type="xsd:string" fixed="$esc.xml(${nextComponent.name})"/>
					</xsd:attributeGroup>
					<xsd:complexType name="${nextComponentName}.CONTENT">
						#if (${nextComponent.childrenAsList.empty})
   						<xsd:simpleContent>
   							<xsd:extension base="${nextComponent.datatype}">
   								<xsd:attributeGroup ref="${nextComponentName}.ATTRIBUTES"/>
   							</xsd:extension>
   						</xsd:simpleContent>
						#else
   						<xsd:complexContent>
   							<xsd:extension base="${nextComponent.datatype}">
   								<xsd:attributeGroup ref="${nextComponentName}.ATTRIBUTES"/>
   							</xsd:extension>
   						</xsd:complexContent>
						#end
					</xsd:complexType>
					<xsd:element name="${nextComponentName}" type="${nextComponentName}.CONTENT"/>
					
					## START Subcomponents
            	#if ($fieldDefs.add(${nextComponent.datatype}))
						#set ($nextSubDatatype = ${nextComponent.datatype})
            		#if(${nextComponent.childrenAsList.empty})
            			<xsd:simpleType name="$nextSubDatatype">
            				<xsd:restriction base="xsd:string"/>
            			</xsd:simpleType>
            		#else
                     <xsd:complexType name="$nextSubDatatype">
                     	<xsd:sequence>
            					#foreach ($nextSubComponent in ${nextComponent.childrenAsList})
            						#set ($nextSubComponentName = $nextSubDatatype + "." + $foreach.count)
            						<xsd:element ref="$esc.xml($nextSubComponentName)" minOccurs="0" maxOccurs="1"/>
            					#end
                     	</xsd:sequence>
                     </xsd:complexType>			
            		#end
					
                  #if(${nextComponent.childrenAsList.empty})
               	#else
            			#set ($nextSubDatatype = ${nextComponent.datatype})
            			#foreach ($nextSubComponent in ${nextComponent.childrenAsList})
            				#set ($nextSubComponentName = $nextSubDatatype + "." + $foreach.count)
         					<xsd:attributeGroup name="${nextSubComponentName}.ATTRIBUTES">
         						<xsd:attribute name="Type" type="xsd:string" fixed=""/>
         						<xsd:attribute name="Table" type="xsd:string" fixed=""/>
         						<xsd:attribute name="LongName" type="xsd:string" fixed="$esc.xml(${nextSubComponent.name})"/>
         					</xsd:attributeGroup>
         					<xsd:complexType name="${nextSubComponentName}.CONTENT">
         						#if ($compositeFieldDefs.contains(${nextSubComponent.datatype}))
            						<xsd:complexContent>
            							<xsd:extension base="${nextSubComponent.datatype}">
            								<xsd:attributeGroup ref="${nextSubComponentName}.ATTRIBUTES"/>
            							</xsd:extension>
            						</xsd:complexContent>
         						#else
            						<xsd:simpleContent>
            							<xsd:extension base="${nextSubComponent.datatype}">
            								<xsd:attributeGroup ref="${nextSubComponentName}.ATTRIBUTES"/>
            							</xsd:extension>
            						</xsd:simpleContent>
         						#end
         					</xsd:complexType>
         					<xsd:element name="${nextSubComponentName}" type="${nextSubComponentName}.CONTENT"/>					
   						#end
						#end
					
					#end
					## END Subcomponents
					
					
					
			#end
		#end
	#end
#end
