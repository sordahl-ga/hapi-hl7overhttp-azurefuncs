<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>HL7 over HTTP Relay - Configuration</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<section name="HL7 over HTTP Relay">

			<macro name="toc">
				<!-- <param name="section" value="2"/>
				<param name="fromDepth" value="0"/>
				<param name="toDepth" value="2"/>  -->
			</macro>
			
		</section>
		
		<section name="Basic Configuration">

			<p>
				The Relay is configured with a file in the <code>conf</code> directory
				called <code>config.xml</code>. This file is a
				<a href="http://www.springsource.org/">Spring Framwork</a> bean
				definition file.
			</p>
		
			<p>
				To configure the relay, you must first understand a few basic concepts:
			</p>
			
			<ul>
				<li>
					<b>Beans:</b>
					Each bean element in the config file is a single module which
					serves a specific purpose. Each bean has an ID which is defined
					in the config file. The relay is configured by defining multiple
					beans and "connecting" them to each other using a process that
					Spring calls "wiring". 
				</li>
				<li>
					<b>Listener Beans:</b>
					Listener beans are used to receive messages.
				</li>
				<li>
					<b>Sender Beans:</b>
					Sender beans are used to transmit (i.e. relay) messages which
					have been received by listener beans.
				</li>
				<li>
					<b>Binder Beans:</b>
					Binder beans connect listener beans to sender beans. In a basic
					configuration, you will have one listener bean bound to one
					sender bean using a single binder bean, but you can get more
					complex by binding multiple beans on either side.
				</li>
			</ul>
		
			<subsection name="The Listener Bean">
				
				<p>
					The following is a simple example of a listener bean which uses
					MLLP to listen for incoming messages:
				</p>
				<source><![CDATA[<bean class="ca.uhn.hl7v2.hoh.relay.listener.RelayMllpListener" id="theListener">
   <property name="port" value="8079"/>
</bean>]]></source>
			
				<p>
					The <b>class</b> attribute indicates what type of listener should be used.
					Listeners must be of type
					<a href="./apidocs/ca/uhn/hl7v2/hoh/relay/listener/IRelayListener.html">IRelayListener</a>.
				</p>
				
				<p>
					The <b>port</b> property selects the port on which the listener will
					receive messages.
				</p>
			
			</subsection>
		
			<subsection name="The Sender Bean">
				
				<p>
					The following is a simple example of a sender bean which uses
					HL7 over HTTP to transmit messages:
				</p>
				<source><![CDATA[<bean class="ca.uhn.hl7v2.hoh.relay.sender.RelayHttpSender" id="theSender">
   <property name="urlString" value="http://localhost:8080/relayURI"/>
</bean>]]></source>
			
				<p>
					The <b>class</b> attribute indicates what type of listener should be used.
					Listeners must be of type
					<a href="./apidocs/ca/uhn/hl7v2/hoh/relay/listener/IRelayListener.html">IRelayListener</a>. Configuration
					properties suported by the chosen implementation (such as "socketTimeout" and "responseTimeout")
					may also be set here.
				</p>
				
				<p>
					The <b>port</b> property selects the port on which the listener will
					receive messages.
				</p>
			
			</subsection>

			<subsection name="The Binder Bean">
				
				<p>
					The binder bean "joins" a specific listener to a specific sender. In 
					a basic configuration, you will bind one listener to one sender, but it
					is possible to bind multiple senders to a single listner, or multiple
					listeners to a single sender.
				</p>
				<source><![CDATA[<bean class="ca.uhn.hl7v2.hoh.relay.Binder">
   <property name="listener" ref="theListener"/>
   <property name="sender" ref="theSender"/>
</bean>]]></source>
			
				<p>
					Binder beans are always of <b>class</b>
					<a href="./apidocs/ca/uhn/hl7v2/hoh/relay/Binder.html">Binder</a>. Note 
					that the "<b>ref</b>" property indicates the "<b>id</b>" of the corresponding
					listener and sender.
				</p>
				
			</subsection>

		</section>
		
		<section name="Advanced HL7 over HTTP Sender">
		
			<p>
				There are a several configuration options you can add to the HTTP Sender in
				order to meet specific application requirements.
			</p>
		
			<subsection name="Authorization">
				
				<p>
					In order to add HTTP basic authorization (username/password) to each
					request, use the following configuration on your sender bean: 
				</p>
				<source><![CDATA[<!-- First, create a credential callback, and provide it with the
     username and password to be transmitted -->    
<bean class="ca.uhn.hl7v2.hoh.auth.SingleCredentialClientCallback" id="theAuthorizationCallback">
   <property name="username" value="hello"></property>
   <property name="password" value="hapiworld"></property>
</bean>

<bean class="ca.uhn.hl7v2.hoh.relay.sender.RelayHttpSender" id="theSender">
   <!-- ... Add other properties to the sender ... -->

   <!-- Add the authorization callback property, referencing your bean above -->
   <property name="authorizationCallback" ref="theAuthorizationCallback"/>
</bean>]]></source>
				
			</subsection>
				
			<subsection name="TLS (SSL) Encryption">
			
				<p>
					To enable encryption on an outgoing HTTP connection (aka HTTPS),
					you simply need to provide a socket factory as a property to the sender.
				</p>
			
				<source><![CDATA[<!-- 
Define a SocketFactory bean. The TlsSocketFactory bean class creates standard
encrypted sockets using built in trusted keys. This means that this will
only work if the receiving system has a private key signed by a trusted
certificate authority.
 -->
<bean class="ca.uhn.hl7v2.hoh.sockets.TlsSocketFactory" id="theSocketFactory">
</bean>
				
<bean class="ca.uhn.hl7v2.hoh.relay.sender.RelayHttpSender" id="theSender">
   <property name="url" value="http://localhost:8000/relayURI"/>

   <!-- ...other properties go here... -->

   <!-- Add a property for a SocketFactory -->
   <property name="socketFactory" ref="theSocketFactory"/>
</bean>]]></source>

			</subsection>

			<subsection name="TLS (SSL) Encryption With Explicit Certificate">
			
				<p>
					To enable encryption on an outgoing HTTP connection (aka HTTPS)
					using a specific certificate, the process is similar to regular
					TLS (as above), but you must first put the certificate into 
					a keystore and configure the Sender to use it.
				</p>
				
				<p>
					This mechanism is useful in several circumstances:
				</p>
				<ul>
					<li>Sending messages to a recipient who is using a self-signed certificate</li>
					<li>Sending messages to a recipient who wishes to us TLS Mutual Authentication</li>
				</ul>

				<p>
					The following example requires that you have your trusted certificate
					in a keystore. See 
					<a href="./creating_a_client_keystore.html">Creating a Client Keystore</a>
					for more information on how to do this. 
				</p>
							
				<source><![CDATA[<!-- 
Define the SocketFactory itself. Note that this example
assumes that the keystore has been placed in the "conf" directory
within the relay installation, and that the keystore has a passphrase
of "changeit". Make sure the "id" matches the "ref" name in the
property above.
-->
<bean class="ca.uhn.hl7v2.hoh.sockets.CustomCertificateTlsSocketFactory" id="theSocketFactory">
   <property name="keystoreFilename" value="conf/keystore.jks"/>
   <property name="keystorePassphrase" value="changeit"/>
</bean>

<bean class="ca.uhn.hl7v2.hoh.relay.sender.RelayHttpSender" id="theSender">
   <property name="url" value="http://localhost:8000/relayURI"/>

   <!-- ...other properties go here... -->

   <!-- Add a property for a SocketFactory -->
   <property name="socketFactory" ref="theSocketFactory"/>
</bean>]]></source>

			</subsection>
		
		</section>
		
		<section name="Troubleshooting">
		
			<p>
				In order to troubleshoot the relay if something isn't 
				working correctly, the first thing to try is to
				increase the verbosity on the log files.
			</p>
		
			<p>
				The HL7 over HTTP Relay uses log4j for its logging.
				The log4j configuration is found in the "conf" directory
				in a file called "log4j.xml". Open this file for examples
				of how to increase logging verbosity (look for a tag
				named "appender").
			</p>
		
		</section>
								
	</body>

</document>
