<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>HL7 over HTTP - Creating Keystores</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>
			<!-- 
		    keytool -genseckey -keyalg AES -keysize 256 -storetype jceks -keystore symmetrickey.jks -alias newkey -storepass thestorepass -keypass thekeypass
		    -->

	<body>
	
	<section name="Creating Keystores by Importing">
			
			<p>
				This page outlines how to create a keystore by
				importing private keys and public certificates that you have
				received from somebody else into a local keystore so that you 
				can use them for encrypted communication.
			</p>
	
	
			<a name="Importing_A_Public_Key"/>
		   <subsection name="Importing a Public Key into a Keystore">
		   	
		   	<p>
		   		Public keys will commonly be in a format called
		   		<a href="http://en.wikipedia.org/wiki/Privacy_Enhanced_Mail">PEM</a>. PEM
		   		files begin and end with a special delimiter line and consist of
		   		a body of Base-64 encoded binary.
		   	</p>
		   	
		   	<p>
		   		Public keys will often have one of the following file extensions:
		   		<b><code>.PEM, .CRT</code></b>
		   	</p>
		   	
		   	<p>
		   		The following is an example of what a PEM file should look like:<br/>
		   		<code>
					-----BEGIN CERTIFICATE-----<br/>
					MIIDdzCCAl+gAwIBAgIETWBDIDANBgkqhkiG9w0BAQsFADBsMRAwDgYDVQQGEwdVbmtub3duMRAw<br/>
					DgYDVQQIEwdVbmtub3duMRAwDgYDVQQHEwdVbmtub3duMRAwDgYDVQQKEwdVbmtub3duMRAwDgYD<br/>
					<span style="color: #808080;">... some lines removed ...</span><br/>
					4UJdLAICuodKr1YNzWOi+qu/C/toHkGIH3qqFlBwxYv+03VFy1ZeqqSFOS4yVZReXrNP9dpvIkcs<br/>
					G9w7mJXpRj444RtF+sKQ15WYs7MmABnIrv9r/+mVbgXO1yawhEzc4rt4m/T5tGpiAE485mGUwZzo<br/>
					7/5nr32KlhSkexwwuZCDpuzm3FC36g+puzVLUic32S1GZ50Z<br/>
					-----END CERTIFICATE-----
		   		</code>
		   	</p>
		   	
		   	<p>
		   		The key may also be in a format known as DER, which is a binary
		   		format. To import a key file in either PEM or DER format into a 
		   		keystore, issue the following command. The following arguments should
		   		be substituted for something appropriate:
		   	</p>
		   	<ul>
		   		<li>
		   			<code>-alias <span style="color: #E06060;">trust_app_alias</span></code> refers to the name
		   			by which the key will be known to the keystore. It generaly doesn't matter what
		   			you put here as long as you choose something meaningful to the 
		   			certificate you are putting in.
		   		</li>
		   		<li>
		   			<code>-file <span style="color: #E06060;">public.cert</span></code> refers to the filename of
		   			the certificate. This file should be in one of the formats listed above.
		   		</li>
		   		<li>
		   			<code>-keystore <span style="color: #E06060;">keystore.jks</span></code> refers to the
		   			name of the keystore you are putting the key in. If no file exists with 
		   			this name, one will be created and given the keystore password that you 
		   			specify at the prompt below. If this keystore already exists, the new
		   			certificate will be added to it, and the password you enter must match
		   			the password that this keystore was previously given.
		   		</li>
		   	</ul>
		   	
		   	<div style="background: #E0E0E0; padding: 20px;">
					$ <span style="color: #E06060;">keytool -import -alias trust_app_alias -file public.cert -keystore truststore.jks -storetype JKS</span><br/>
					Enter keystore password:  <span style="color: #E06060;">trustpassword</span><br/>
					Re-enter new password: <span style="color: #E06060;">trustpassword</span><br/>
					Owner: CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown<br/>
					Issuer: CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown<br/>
					Serial number: 50257625<br/>
					Valid from: Fri Aug 10 16:59:17 EDT 2012 until: Thu Aug 10 16:59:17 EDT 2017<br/>
					Certificate fingerprints:<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MD5:  B9:5B:43:34:CA:00:82:EE:1F:7B:24:14:B6:3E:56:09<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SHA1: 98:56:ED:0B:E0:F2:A6:20:2D:DD:66:72:5F:DF:7D:CB:BC:98:C7:AE<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Signature algorithm name: SHA1withRSA<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version: 3<br/>
					Trust this certificate? [no]:  <span style="color: #E06060;">yes</span><br/>
					Certificate was added to keystore<br/>
				</div>		   	
		   	
		   </subsection>

			<a name="Importing_A_Private_Key"/>
		   <subsection name="Importing a Private Key into a Keystore">
		   
		   	<p>
		   		Private keys will often be provided using a format called PKCS#12. This is
		   		a format produced by the OpenSSL toolset. PKCS#12 files are generally provided
		   		using the extension <code><b>.PFX</b></code> or <code><b>.P12</b></code>.
		   	</p>
		   
		   	<p>
		   		The "openssl" tool can first be used to verify the contents of a PKCS#12 file. Note that
		   		the file itself will have a password which should be supplied by whoever supplies the file.
		   		In the example below, the password is "helloworld123".
		   	</p>
		   
		   	<div style="background: #E0E0E0; padding: 20px;">
			   	$ <span style="color: #E06060;">openssl pkcs12 -info -in private_key.pfx -nokeys</span><br/>
					Enter Import Password: <span style="color: #E06060;">helloworld123</span><br/>
					MAC Iteration 2000<br/>
					MAC verified OK<br/>
					PKCS7 Data<br/>
					Shrouded Keybag: pbeWithSHA1And3-KeyTripleDES-CBC, Iteration 2000<br/>
					Bag Attributes<br/>
					    Microsoft Local Key set: &lt;No Values&gt;<br/>
					    localKeyID: 01 00 00 00 <br/>
					    <b>friendlyName: le-d7ffb209-fb59-4e0c-bd42-75157dccc563</b><br/>
					    Microsoft CSP Name: Microsoft RSA SChannel Cryptographic Provider<br/>
					Key Attributes<br/>
					    X509v3 Key Usage: 10<br/> 
					Enter PEM pass phrase: <span style="color: #E06060;">(hit enter)</span><br/>
					PKCS7 Encrypted data: pbeWithSHA1And40BitRC2-CBC, Iteration 2000<br/>
					Certificate bag<br/>
					Bag Attributes<br/>
					    localKeyID: 01 00 00 00<br/> 
					subject=/C=CA/ST=Ontario/L=Toronto/O=TestOrg/OU=TestOU/CN=testers.uhn.ca
					issuer=/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert High Assurance CA-3
					-----BEGIN CERTIFICATE-----<br/>
					MIIDdzCCAl+gAwIBAgIETWBDIDANBgkqhkiG9w0BAQsFADBsMRAwDgYDVQQGEwdVbmtub3duMRAw<br/>
					DgYDVQQIEwdVbmtub3duMRAwDgYDVQQHEwdVbmtub3duMRAwDgYDVQQKEwdVbmtub3duMRAwDgYD<br/>
					<span style="color: #808080;">... many lines removed ...</span><br/>
					4UJdLAICuodKr1YNzWOi+qu/C/toHkGIH3qqFlBwxYv+03VFy1ZeqqSFOS4yVZReXrNP9dpvIkcs<br/>
					G9w7mJXpRj444RtF+sKQ15WYs7MmABnIrv9r/+mVbgXO1yawhEzc4rt4m/T5tGpiAE485mGUwZzo<br/>
					7/5nr32KlhSkexwwuZCDpuzm3FC36g+puzVLUic32S1GZ50Z<br/>
					-----END CERTIFICATE-----
		   	</div>
		   
		   	<p>
		   		In particular, the output above contains the "friendlyName" attribute
		   		value of "le-d7ffb209-fb59-4e0c-bd42-75157dccc563". This is a kind of alias
		   		which will be used to refer to the key when importing it into the keystore.
		   	</p>
		   
		   	<p>
		   		To import a PKCS#12 file into a keystore, use the following command. Note the following
		   		arguments:
		   	</p>
		   	<ul>
		   		<li>
		   			<code>-destkeystore <span style="color: #E06060;">otherside.jks</span></code> tells
		   			keytool the filename for the destination keystore. This is the keystore that the 
		   			key will be copied into
		   		</li>
		   		<li>
		   			<code>-deststorepass <span style="color: #E06060;">changeit</span></code> tells 
		   			keytool the password to use for the keystore. If this is a new keystore being created,
		   			this same password will need to be used for any subsequent modifications. If this is
		   			an existing keystore being added to, the password must match its pre-existing password
		   		</li>
		   		<li>
		   			<code>-srckeystore <span style="color: #E06060;">private_key.pfx</span></code> refers to the
		   			name of the PKCS#12 file containing the private key
		   		</li>
		   		<li>
		   			<code>-srcalias <span style="color: #E06060;">le-d7ffb209-fb59-4e0c-bd42-75157dccc563</span></code> 
		   			refers to the friendly name of the key within the PKCS#12 file. This can be obtained using
		   			openssl, as seen above.
		   		</li>
		   		<li>
		   			<code>-destalias <span style="color: #E06060;">lab_staging_system</span></code> 
		   			gives the key a friendly name (or alias) within the destination keystore. This
		   			should be a small ID which refers to the specific purpose for the key
		   		</li>
		   		<li>
		   			<code>-destkeypass <span style="color: #E06060;">changeit</span></code> 
		   			gives the key itself a password within the keystore.
		   		</li>
		   	</ul>
		   
		   	<div style="background: #E0E0E0; padding: 20px;">
			   	$ <span style="color: #E06060;">keytool -v -importkeystore -destkeystore otherside.jks 
			   		-deststorepass changeit -srckeystore private_key.pfx 
			   		-srcstoretype PKCS12 -srcalias le-d7ffb209-fb59-4e0c-bd42-75157dccc563 
			   		-destalias lab_staging_system -destkeypass changeit</span><br/>
					Enter source keystore password: <span style="color: #E06060;">helloworld123</span><br/>
					[Storing otherside.jks]
				</div>		   
			</subsection>
					   
		</section>

	</body>

</document>
