<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE confgen-usage [
  <!ENTITY rarr "&#8594;" >
]>

<!-- 
*************
Don't format this document using eclipse XML formatter!
It will mess up the indenting in a few spots
*************
-->


<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>SuperStructureGen Usage</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<section name="SuperStructureGen Plugin - Usage">
			
			<macro name="toc">
			</macro>

			<p>
				The superstructuregen plugin is used to create a set of HAPI structure classes
				which combine multiple message structures into a single
				class.
			</p>
			<p>
				See the <a href="../xref/ca/uhn/hl7v2/examples/ExampleSuperStructures.html">SuperStructures</a>
				example page for more information on their usage. 
			</p>
			
			<subsection name="Using the Plugin">
			
				<p>
					Usage of the plusing is as follows:
				</p>
				
<source>&lt;plugin&gt;
   &lt;groupId&gt;ca.uhn.hapi&lt;/groupId&gt;
   &lt;artifactId&gt;hapi-sourcegen&lt;/artifactId&gt;
   &lt;version&gt;${hapi_version_stable}&lt;/version&gt;
   &lt;executions&gt;
      &lt;execution&gt;
         &lt;id&gt;superstructure_adt&lt;/id&gt;
         &lt;goals&gt;
            &lt;goal&gt;superstructuregen&lt;/goal&gt;
         &lt;/goals&gt;
         &lt;configuration&gt;
         
            &lt;!-- The directory to place the generated files in --&gt;
            &lt;targetDirectory&gt;${basedir}/target/generated-sources/superstructuregen&lt;/targetDirectory&gt;
            
            &lt;!-- The name for the genrated strcuture --&gt;
            &lt;targetStructureName&gt;ADT_AXX&lt;/targetStructureName&gt;
            
            &lt;!-- This is the HL7 version to base the superstructure on --&gt;
            &lt;version&gt;2.5&lt;/version&gt;
            
            &lt;!-- 
            And finally, a list of structures to combine. This list
            supports regex, so the following are all valid 
            --&gt;
            &lt;structures&gt;
               &lt;structure&gt;ADT_A0[1-3]&lt;/structure&gt;
               &lt;structure&gt;ADT_A17&lt;/structure&gt;
               &lt;structure&gt;ORU.*&lt;/structure&gt;
            &lt;/structures&gt;
            
         &lt;/configuration&gt;
      &lt;/execution&gt;
   &lt;/executions&gt;
   &lt;dependencies&gt;
      
      &lt;!-- Make sure to include the appropriate HAPI version as a dependency --&gt;
      &lt;dependency&gt;
         &lt;groupId&gt;ca.uhn.hapi&lt;/groupId&gt;
         &lt;artifactId&gt;hapi-structures-v25&lt;/artifactId&gt;
         &lt;version&gt;${hapi.version.structures}&lt;/version&gt;
      &lt;/dependency&gt;
      
   &lt;/dependencies&gt;
&lt;/plugin&gt;</source>
				
			</subsection>
			
		</section>

		<section name="Using the Generated Sources">
			
			<p>
				Once you have completed the source generation, you have
				a set of classes you can use in your application.
			</p>
			
			<p>
				The following examples assume you have created a custom
				structure called "ADT_AXX" and generated classes using
				the confgen plugin.
			</p>
			
			<subsection name="Sending Custom Structures">
			
				<p>
					To send messages out using your custom structures:
				</p>
				
				<source>// Create a new instance of the message and initialize it
ADT_AXX outMsg = new ADT_AXX();
outMsg.initQuickstart("ZDT", "A01", "T");

// .. populate other segments ..
// e.g. outMsg.getPID().getPid3_PatientIdentifierList(0).......

// Create a hapi context and send the message
DefaultHapiContext ctx = new DefaultHapiContext();
Connection conn = ctx.newClient("someserver.com", 8888, false);

// Send the message
Message response = conn.getInitiator().sendAndReceive(outMsg);</source>
		
			</subsection>
			
			<subsection name="Receiving Custom Structures">
			
				<p>
					The easiest way to receive messages and have them
					parsed into a custom structure is to use a
					CanonicalModelClassFactory
					and configure it to always use your custom 
					structure.					
				</p>
				
				<source>DefaultHapiContext ctx = new DefaultHapiContext();
ModelClassFactory mcf = new CanonicalModelClassFactory(ADT_AXX.class);
ctx.setModelClassFactory(mcf);

HL7Service server = ctx.newServer(8888, false);
server.start();</source>

			</subsection>		
		
		</section>

	</body>
</document>
