                                    ------
                                    HAPI by Example
                                    ------
                                    ------
                                    ------

Developing using HAPI - By Example

  This page is intended to explain how to develop an application
  that uses HAPI to send or receive messages, using straightforward
  examples. 
  
  It is a new section of the HAPI documentation, and is still
  very much a work in progress. If you have any 
  comments/suggestions/corrections, please send them to
  {{mailto:jamesagnew@sourceforge.net}}.

  Please note that this page assumes at least a basic familiarity 
  with {{{http://hl7.org}HL7}} and it's terminology.

~~* HAPI Community Survey 2011
~~
~~  HAPI Community Survey! This year, HAPI will be ten years old! To celebrate, we are
~~  launching our first survey on the HAPI user community. The survey takes less than five
~~  minutes to fill out, as it is just 8 quick multiple choice questions. Please take
~~  a few minutes to show your support!
~~  
~~  {{{https://sourceforge.net/apps/limesurvey/hl7api/index.php?sid=69291&newtest=Y}Access the survey here}}

* The Basics

  * A good starting point with regards to using HAPI would be to
    {{{./xref/ca/uhn/hl7v2/examples/ExampleParseMessages.html}parse a message}}.
  
  
* Creating messages

  * Next, let's try 
    {{{./xref/ca/uhn/hl7v2/examples/CreateAMessage.html}creating a new message}} 
    from scratch.
  
  * Another common problem is to 
    {{{./xref/ca/uhn/hl7v2/examples/PopulateOBXSegment.html}populate an ORU message's OBX segment}}.


* Sending and receiving
  
  * First, you will need a {{{./xref/ca/uhn/hl7v2/examples/TheHapiContext.html}HAPI Context}}.
  
  * Now, let's introduce some {{{./xref/ca/uhn/hl7v2/examples/SendAndReceiveAMessage.html}network operations}}
    to send messages from a client and receive messages to a server.

  * Read messages from a file and 
    {{{./xref/ca/uhn/hl7v2/examples/SendLotsOfMessages.html}send multiple messages out}} using ConnectionHub.

  * Handle different  
    {{{./xref/ca/uhn/hl7v2/examples/HandlingCharacterEncodings.html}character encoding schemes}} (charsets), such
    as UTF-8, or ISO-8859/2.
    
  * Message encryption is possible using {{{./xref/ca/uhn/hl7v2/examples/UsingTls.html}SSL/TLS}}
	
  * Configure   
    {{{./xref/ca/uhn/hl7v2/examples/CustomThreading.html} threading}} strategies by using custom ExecutorServices.


* Sending and receiving using HL7 over HTTP

 * See the {{{./hapi-hl7overhttp/doc_hapi.html}HL7 over HTTP}} page for information on how to
   incorporate HL7-over-HTTP instead of MLLP for a more robust and secure communication method.
  
* Parsing Messages

  * There are several ways to  
    {{{./xref/ca/uhn/hl7v2/examples/HandlingMultipleVersions.html}handle multiple versions}}
    of HL7 within a single application.

  * Another way of reading and writing to message objects is to use 
    a {{{./xref/ca/uhn/hl7v2/examples/ExampleUseTerser.html}Terser}}

  * We can use a subclassed parser to {{{./xref/ca/uhn/hl7v2/examples/CorrectInvalidMessageBeforeParsing.html}correct invalid messages before parsing them}}.

  * {{{./xref/ca/uhn/hl7v2/examples/ExampleSuperStructures.html}SuperStructures}} can be used
    to write applications which deal with various different ADT structures
    without writing different routines for each structure.

  * Allow parsing of ORU^R01 (and other messages with OBX segments) which have
    an invalid value in OBX-2, which specifies the type used to parse OBX-5 using 
    {{{./xref/ca/uhn/hl7v2/examples/ParseInvalidObx2Values.html}ParserConfiguration}}.


* Custom Segments and Structures

  * {{{./xref/ca/uhn/hl7v2/examples/CustomModelClasses.html}Custom Model Classes}} and generic segments can be used to handle custom message types and Z-segments.
  
  * The {{{./conformance.html}Conformance}} page has information about the "confgen" maven plugin, which can be used to generate custom classes easily using HL7 conformance profiles.


* Validating Messages

  * Once we're parsing messages, we can 
    {{{./xref/ca/uhn/hl7v2/examples/MessageValidation.html}validate messages}}
    to make sure they contain no invalid data.
  
  * We can define our own
    {{{./xref/ca/uhn/hl7v2/examples/CustomMessageValidation.html}validation rules}}
    to adapt validation to site-specific requirements.

  * Another variant is to use a
    {{{./xref/ca/uhn/hl7v2/examples/CustomMessageValidationWithValidatingVisitor.html}MessageVisitor for validating }}
    e.g. that mandatory fields in a message instance are not empty.

  * To be even more advanced, we can 
    {{{./xref/ca/uhn/hl7v2/examples/MessageValidationUsingConformanceProfile.html}validate messages}}
    using conformance profiles. Note that the conformance profile used in this
    example can be seen {{{./xref/ca/uhn/hl7v2/examples/profiles/ADT_A31.xml}HERE}}. See the FAQ for 
    notes on using this in your own applications. 
    

* Advanced Creating Messages
  
  * Alessandro Delprete submitted {{{./xref/ca/uhn/hl7v2/examples/EncapsulatedData.html}this example}} of 
    how to embed a CDA document as MIME content in an MDM^T02 message.


* Configuring HAPI

  * The {{{./configuring_hapi.html}Configuring HAPI}} page explains several options for advanced configuration.
  
  
* Utility Classes

  * {{{./xref/ca/uhn/hl7v2/examples/ReadMessagesFromFile.html}Reading Messages from a File}}
  
  
