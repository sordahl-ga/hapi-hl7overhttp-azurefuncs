<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>HL7 over HTTP - Encryption Profile</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<section name="Security Profile">

			<p>
				To use Security Profile, you have two options:
			</p>
			<ul>
				<li>
					You may use a self-signed certificate. Self-signed certificates
					provide excellent security at the expense of requiring extra
					configuration on the client side. Self-signed certificates provide
					strong encryption, and can be used to provide authentication as well
					(in other words, proof that the sender is really who they claim to be).
				</li>
				<li>
					You may install a certificate which has been signed by a trusted 
					<a href="http://en.wikipedia.org/wiki/Certificate_authority">Certificate Authority (CA)</a>
					for mutual authentication. Mutual authentication requires more
					effort to set up, but it brings additional benefit. On top of
					providing encryption and authentication of the client to the server,
					mutual authentiction provides authentication of the server to the
					client, which is especially useful if you have an interface
					that supports queries (i.e. may return protected data).  
				</li>
			</ul>
			    
		    <p>
		        In either case, you 
		        will first need a self signed private key in a keystore
		        and a corresponding public key in a truststore. 			        
		    </p>
		    <p>
		        <a href="generating_keys.html">See here</a> for information on
		        creating these stores.
		    </p>
			    
			<subsection name="Securing the client">
			    
				<p>
					Once you have a truststore, it can be associated
					with the client (the sending application) by creating
					a 
					<a href="apidocs/ca/uhn/hl7v2/hoh/sockets/CustomCertificateTlsSocketFactory.html">CustomCertificateTlsSocketFactory</a>.			        
				</p>
				<macro name="snippet">
					<param name="id" value="client"/>
					<!--<param name="file" value="${project.parent.basedir}/hapi-examples/src/main/java/ca/uhn/hl7v2/examples/hoh/CustomCertificateClient.java"/>-->
					<param name="file" value="../hapi-examples/src/main/java/ca/uhn/hl7v2/examples/hoh/CustomCertificateClient.java"/>
				</macro>
			    			    
			</subsection>

			<subsection name="Securing the server">
			    
				<p>
				    The server needs to be associated with a keystore
				    containing a private key. If you are using an
				    embedded Jetty instance, it will look like this:
				</p>
				<macro name="snippet">
					<param name="id" value="server"/>
					<!--<param name="file" value="${project.parent.basedir}/hapi-examples/src/main/java/ca/uhn/hl7v2/examples/hoh/CustomCertificateServer.java"/>-->
					<param name="file" value="../hapi-examples/src/main/java/ca/uhn/hl7v2/examples/hoh/CustomCertificateServer.java"/>
				</macro>
			    			    
				<p>
				    If the server is using a HAPI SimpleServer with the
				    HL7 over HTTP LLP implementation, Encryption Profile
				    can be used as follows:
				</p>
				<macro name="snippet">
					<param name="id" value="llp"/>
					<!--<param name="file" value="${project.parent.basedir}/hapi-examples/src/main/java/ca/uhn/hl7v2/examples/hoh/CustomCertificateServer.java"/>-->
					<param name="file" value="../hapi-examples/src/main/java/ca/uhn/hl7v2/examples/hoh/CustomCertificateServer.java"/>
				</macro>
				
			</subsection>
			
		</section>

	</body>

</document>
