#set( $HASH = '#' )
/*
 * This class is an auto-generated source file for a HAPI
 * HL7 v2.x standard structure class.
 *
 * For more information, visit: http://hl7api.sourceforge.net/
 * 
 * The contents of this file are subject to the Mozilla Public License Version 1.1 
 * (the "License"); you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at http://www.mozilla.org/MPL/ 
 * Software distributed under the License is distributed on an "AS IS" basis, 
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the 
 * specific language governing rights and limitations under the License. 
 * 
 * The Original Code is "[file_name]".  Description: 
 * "[one_line_description]" 
 * 
 * The Initial Developer of the Original Code is University Health Network. Copyright (C) 
 * 2012.  All Rights Reserved. 
 * 
 * Contributor(s): ______________________________________. 
 * 
 * Alternatively, the contents of this file may be used under the terms of the 
 * GNU General Public License (the  "GPL"), in which case the provisions of the GPL are 
 * applicable instead of those above.  If you wish to allow use of your version of this 
 * file only under the terms of the GPL and not to allow others to use your version 
 * of this file under the MPL, indicate your decision by deleting  the provisions above 
 * and replace  them with the notice and other provisions required by the GPL License.  
 * If you do not delete the provisions above, a recipient may use your version of 
 * this file under either the MPL or the GPL. 
 * 
 */


package ${basePackageName}group;

import ${basePackageName}segment.*;

import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.parser.ModelClassFactory;
import ca.uhn.hl7v2.model.*;

/**
 * <p>Represents a $groupName group structure (${typeDescription}).
 * A Group is an ordered collection of message segments that can repeat together or be optionally in/excluded together.
 * This Group contains the following elements:  
 * </p>
 * <ul>
#set ($hasChc = false)
#foreach ( $group in $groups )
    #if (${group.isRequired()})
      #set ($reqd = "")
    #else
      #set ($reqd = "optional")
    #end
    #if (${group.isRepeating()})
      #set ($rept = "repeating")
    #else
      #set ($rept = "")
    #end                                                       
    #if (${group.isChoice()})
      #set ($chc = "choice")
      #set ($hasChc = true)
    #else
      #set ($chc = "")
    #end
 * <li>${velocityCount}: ${group.name} (${group.description}) <b>$reqd $rept $chc</b></li>
#end
 * </ul>
#if ($hasChc)
 * <p>
 * Note that this structure has "choice" elements. This means that one of the 
 * structures above marked as "choice" must be present, but no more than one.
 * </p> 
#end
 */
//@SuppressWarnings("unused")
public class $groupName extends AbstractGroup {

    /** 
     * Creates a new $groupName group
     */
    public ${groupName}(Group parent, ModelClassFactory factory) {
       super(parent, factory);
       init(factory);
    }

    private void init(ModelClassFactory factory) {
       try {
#foreach ( $group in $groups )
    #if (${group.required})
      #set ($reqd = "true")
    #else
      #set ($reqd = "false")
    #end
    #if ($group.repeating)
      #set ($rept = "true")
    #else
      #set ($rept = "false")
    #end
    #if (${group.choice})
      #set ($chc = "true")
    #else
      #set ($chc = "false")
    #end
          this.add(${group.name}.class, $reqd, $rept, $chc);
#end
       } catch(HL7Exception e) {
          log.error("Unexpected error creating $groupName - this is probably a bug in the source code generator.", e);
       }
    }

    /** 
     * Returns "${specVersion}"
     */
    public String getVersion() {
       return "${specVersion}";
    }


#foreach ( $group in $groups )

    /**
     * Returns
#if ($group.repeating)
     * the first repetition of 
#end      
     * $group.indexName (${group.description}) - creates it if necessary
     */
    public $group.name get${group.indexName}() { 
       $group.name retVal = getTyped("${group.indexName}", ${group.name}.class);
       return retVal;
    }


#if ($group.repeating)
    /**
     * Returns a specific repetition of
     * $group.unqualifiedName (${group.description}) - creates it if necessary
     *
     * @param rep The repetition index (0-indexed, i.e. the first repetition is at index 0)
     * @throws HL7Exception if the repetition requested is more than one 
     *     greater than the number of existing repetitions.
     */
    public $group.name get${group.indexName}(int rep) { 
       $group.name retVal = getTyped("${group.indexName}", rep, ${group.name}.class);
       return retVal;
    }

    /** 
     * Returns the number of existing repetitions of ${group.indexName} 
     */ 
    public int get${group.indexName}Reps() {  
        return getReps("${group.indexName}");
    } 

    /** 
     * <p>
     * Returns a non-modifiable List containing all current existing repetitions of ${group.indexName}.
     * <p>
     * <p>
     * Note that unlike {@link ${HASH}get${group.indexName}()}, this method will not create any reps
     * if none are already present, so an empty list may be returned.
     * </p>
     */ 
    public java.util.List<${group.name}> get${group.indexName}All() throws HL7Exception {
    	return getAllAsList("${group.indexName}", ${group.name}.class);
    } 

    /**
     * Inserts a specific repetition of ${group.indexName} (${group.description})
     * @see AbstractGroup${HASH}insertRepetition(Structure, int) 
     */
    public void insert${group.indexName}(${group.name} structure, int rep) throws HL7Exception { 
       super.insertRepetition("${group.indexName}", structure, rep);
    }


    /**
     * Inserts a specific repetition of ${group.indexName} (${group.description})
     * @see AbstractGroup${HASH}insertRepetition(Structure, int) 
     */
    public ${group.name} insert${group.indexName}(int rep) throws HL7Exception { 
       return (${group.name})super.insertRepetition("${group.indexName}", rep);
    }


    /**
     * Removes a specific repetition of ${group.indexName} (${group.description})
     * @see AbstractGroup${HASH}removeRepetition(String, int) 
     */
    public ${group.name} remove${group.indexName}(int rep) throws HL7Exception { 
       return (${group.name})super.removeRepetition("${group.indexName}", rep);
    }

#end

#end

}

